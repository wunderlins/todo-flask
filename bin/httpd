#!/usr/bin/env python

# paths
import sys, os

if getattr(sys, 'frozen', False):
	# we are running in a bundle
	basedir = sys._MEIPASS
	exe     = os.path.realpath(sys.executable)
else:
	# we are running in a normal Python environment
	basedir = os.path.realpath(os.path.dirname(__file__) + "/..")
	exe     = os.path.realpath(sys.argv[0])
sys.path.insert(1, os.path.join(basedir, "lib/site-packages"))
sys.path.insert(1, os.path.join(basedir, "lib"))

#print """exe: % s
#basedir: %s""" % (exe, basedir)

# libraries
from core import *
from flask import escape
from flask import jsonify
from flask import render_template

@app.route('/')
def hello_world():
	ret = json.dumps(app.config, indent=4, default=lambda x:str(x))
	root = Node.query.get(1)
	#return "Root: " + escape(str(root))
	return render_template('index.html', root=root)

@app.route("/_/get/<int:id>")
def get_by_id(id):
	n = Node.query.get(id).to_dict()
	return jsonify(**n)

def vis_list(n):
	""" traverse nodes """
	nodes = []
	edges = []
	if len(n.children):
		nodes.append({"id": n.id, "label": n.name})
		if n.parent:
			edges.append({"from": n.parent , "to": n.id})
		
		for e in n.children:
			(n, e) = vis_list(e)
			nodes = nodes + n
			edges = edges + e
	else:
		nodes.append({"id": n.id, "label": n.name})
		edges.append({"from": n.parent , "to": n.id})
	
	return (nodes, edges)

@app.route("/_/get/vis")
def get_vis():
	r = Node.query.get(1)
	(n, e) = vis_list(r)
	return jsonify({"nodes": n, "edges": e})

if __name__ == "__main__":
	app.run(port=cfg["webserver"]["port"], host=cfg["webserver"]["host"])
