#!/usr/bin/env python

# paths
import sys, os

if getattr(sys, 'frozen', False):
	# we are running in a bundle
	basedir = sys._MEIPASS
	exe     = os.path.realpath(sys.executable)
else:
	# we are running in a normal Python environment
	basedir = os.path.realpath(os.path.dirname(__file__) + "/..")
	exe     = os.path.realpath(sys.argv[0])
sys.path.insert(1, os.path.join(basedir, "lib/site-packages"))
sys.path.insert(1, os.path.join(basedir, "lib"))

#print """exe: % s
#basedir: %s""" % (exe, basedir)

# libraries
from core import *
from flask import escape
from flask import jsonify
from flask import render_template
from flask import request
from flask import url_for
from flask import abort

import json

@app.route('/')
def node_map():
	#ret = json.dumps(app.config, indent=4, default=lambda x:str(x))
	#root = Node.query.get(1)
	#return "Root: " + escape(str(root))
	return render_template('index.html')

@app.route('/angular')
def angular():
	urls = {
		"all": url_for('get_cy'),
		"by_id": url_for('get_by_id', id=-1)[:-2]
	}
	return render_template('angular.html', urls=urls)

@app.route("/_/get/<int:id>")
def get_by_id(id):
	n = Node.query.get(id)
	if not n:
		abort(404)
	return jsonify(**n.to_dict())

def cy_list(n):
	""" traverse nodes """
	nodes = []
	if len(n.children):
		if n.parent:
			nodes.append({"data": {"id": "n"+str(n.id), "label": n.name}})
			nodes.append({"data": {"target": "n"+str(n.id) , \
			              "source": "n"+str(n.parent), "id": "e"+str(n.parent)+"."+str(n.id)}})
		else: # root
			nodes.append({"data": {"id": "n"+str(n.id), "label": n.name, "bgcol": "red"}})
		
		for e in n.children:
			n = cy_list(e)
			nodes = nodes + n
	else:
		nodes.append({"data": {"id": "n"+str(n.id), "label": n.name}})
		nodes.append({"data": {"target": "n"+str(n.id) , \
		              "source": "n"+str(n.parent), "id": "e"+str(n.parent)+"."+str(n.id)}})
	
	return nodes

@app.route("/_/get/cy")
def get_cy():
	"""
	elements: [ // list of graph elements to start with
		{ data: { id: 'a', label: "aaaa" }},
		{ data: { id: 'b', label: 'bbb' }},
		{ data: { id: 'ab', source: 'a', target: 'b' }} // edge ab 
	],
	"""
	r = Node.query.get(1)
	ret = cy_list(r)
	return jsonify({"elements": ret})

@app.route("/_/set/cy", methods = ["POST"])
def set_cy():
	print request.data
	data = json.loads(request.data)
	p = Node.query.get(data["parent"])
	n = Node(data["name"])
	p.children.append(n)
	db.session.add(n)
	db.session.commit()
	
	ret = [
		{
			"data": {
				"id": "n" + str(n.id),
				"label": n.name
			}
		}, {
			"data": {
				"id": "e" + str(data["parent"]) + "." + str(n.id),
				"source": "n" + str(data["parent"]),
				"target": "n" + str(n.id)
			}
		}
	]
	return jsonify({"elements": ret})

if __name__ == "__main__":
	
	# handle ssl keys if they are configured and readable
	ssl_key_private = None
	ssl_key_public = None
	try:
		ssl_key_private = str(cfg["ssl"]['private_key']), # "etc/certs/localhost.csr",
		ssl_key_public = str(cfg["ssl"]['public_key']), # "etc/certs/localhost.key"
		ssl_key_private = ssl_key_private[0]
		ssl_key_public = ssl_key_public[0]
	except:
		pass
	
	# check if the files exist and are readable
	try:
		if os.path.isfile(ssl_key_private) == False: 
			print "Cannot read public key: %s" % ssl_key_private
			ssl_key_private = None
	except TypeError as e:
		ssl_key_private = None
					
	try:
		if os.path.isfile(ssl_key_public) == False: 
			print "Cannot read private key: %s" % ssl_key_public
			ssl_key_public = None
	except TypeError as e:
		ssl_key_public = None
	
	# run the webserver
	if ssl_key_private != None and ssl_key_public != None:
		# https
		ssl_ctx = (os.path.realpath(ssl_key_private), os.path.realpath(ssl_key_public))
		ssl_ctx = "adhoc"
		app.run(port=cfg["webserver"]["port"], host=cfg["webserver"]["host"], \
			ssl_context = ssl_ctx, threaded=True, debug=True)
	else:
		# http
		app.run(port=cfg["webserver"]["port"], host=cfg["webserver"]["host"]) 

